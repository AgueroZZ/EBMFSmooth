"0","plot_expression <- function(i, data_frame) {"
"0","  # Check if the index is within bounds"
"0","  if (i < 1 || i > nrow(data_frame)) {"
"0","    stop(""Index out of bounds. Please provide a valid index."")"
"0","  }"
"0",""
"0","  # Define actual time points corresponding to the column names"
"0","  actual_time <- c(0, 15, 30, 60, 120, 240, 360, 480, 720, 960, 1200, 1440)/60  # Adjust if needed"
"0","  if (length(actual_time) != (ncol(data_frame) - 4)) {"
"0","    stop(""Mismatch between time points and expression data columns."")"
"0","  }"
"0",""
"0","  # Extract the expression data for the specified gene"
"0","  gene_expression <- data_frame[i, 5:ncol(data_frame)]  # Assuming expression data starts at column 5"
"0",""
"0","  # Create a dataframe for plotting"
"0","  plot_data <- data.frame("
"0","    Time = actual_time,"
"0","    Expression = as.numeric(gene_expression)"
"0","  )"
"0",""
"0","  # Add the gene name for the title"
"0","  gene_name <- data_frame$`Gene name`[i]"
"0",""
"0","  # Generate the plot"
"0","  ggplot(plot_data, aes(x = Time, y = Expression)) +"
"0","    geom_line(color = ""blue"") +"
"0","    geom_point(size = 1, color = ""red"") +"
"0","    labs("
"0","      title = paste(""Gene:"", gene_name),"
"0","      x = ""Time (hours)"","
"0","      y = ""Rel (Log) Expression Level"""
"0","    ) +"
"0","    theme_minimal() +"
"0","    theme("
"0","      title = element_text(size = 6),"
"0","      axis.text.x = element_text(angle = 45, hjust = 1, size = 10)"
"0","    )"
"0","}"
"0","p1 <- plot_expression(1, Iyer_expression); p2 <- plot_expression(2, Iyer_expression)"
"0","p3 <- plot_expression(3, Iyer_expression); p4 <- plot_expression(4, Iyer_expression)"
"0",""
"0","gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2)"
