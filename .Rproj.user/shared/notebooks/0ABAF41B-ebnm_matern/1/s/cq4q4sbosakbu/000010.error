{"frames":[{"func":"system.time({\n    f.mod = flashier::flash(data = (Y), S = (sigma_E), ebnm_fn = ebnm_list, \n        greedy_Kmax = 2, var_type = 0, backfit = T, verbose = 3)\n})","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"flashier::flash(data = (Y), S = (sigma_E), ebnm_fn = ebnm_list, \n    greedy_Kmax = 2, var_type = 0, backfit = T, verbose = 3)","file":"","line_number":2,"end_line_number":6,"character_number":3,"end_character_number":28},{"func":"flash_backfit(fl, verbose = verbose)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"update.factors.in.kset(proposed.f, kset)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"update.factor(factor, flash, update.tau = FALSE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"update.factor.one.n(factor, n, flash)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"solve.ebnm(factor, n, flash)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(ebnm.fn.ignore.warn(g = g), error = function(cnd) {\n    if (fixg | is.null(g)) {\n        stop(paste(\"EBNM solver (no warmstart) threw error:\", \n            cnd)) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"ebnm.fn.ignore.warn(g = g)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers(ebnm.fn(x = ebnm.args$x, s = ebnm.args$s, \n    g_init = g, fix_g = fixg, output = output), warning = function(w) {\n    if (!is.null(ignored.warnings) && any(startsWith(conditionMessage(w), \n        ignored.warnings)))  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"ebnm.fn(x = ebnm.args$x, s = ebnm.args$s, g_init = g, fix_g = fixg, \n    output = output)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"INLA::inla(formula, scale = (1/s^2), control.inla = list(int.strategy = \"eb\", \n    strategy = \"gaussian\"), control.family = list(hyper = list(prec = list(fixed = TRUE, \n    initial = 0))), data = INLA::inla.stack.data(stack), control.predictor = list(A = INLA::inla.stack.A(stack)))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"inla.core.safe(formula = formula, family = family, contrasts = contrasts, \n    data = data, quantiles = quantiles, E = E, offset = offset, \n    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata, \n    lp.scale = lp.scale, link.covariates = link.covariates, verbose = verbose,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"run.inla()","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"try(inla.core(formula = formula, family = family, contrasts = contrasts, \n    data = data, quantiles = quantiles, E = E, offset = offset, \n    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata, \n    lp.scale = lp.scale, link.covariates = link.covariates, verbose = verbose,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"inla.core(formula = formula, family = family, contrasts = contrasts, \n    data = data, quantiles = quantiles, E = E, offset = offset, \n    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata, \n    lp.scale = lp.scale, link.covariates = link.covariates, verbose = verbose,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"inla.getOption(\"inla.timeout\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"inla.fmesher.call.builtin()","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"system.file(\"bin/mac.arm64/fmesher.run\", package = \"INLA\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"find.package(package, lib.loc, quiet = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error : object 'fine_locations' not found\n"}