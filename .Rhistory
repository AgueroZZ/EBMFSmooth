"0HR", "15MIN", "30MIN", "1HR", "2HR", "4HR", "6HR", "8HR",
"12HR", "16HR", "20HR", "24HR", "UNSYN", "30MINC", "1HRC",
"2HRC", "4HRC", "0HRC", "UNSYNC"
)
colnames(data_frame) <- headers
# Check the first few rows of the data
head(data_frame)
# Extract the table nodes
table_nodes <- html_data %>% html_nodes("table")
# Get the second table (assuming the second table is the target)
target_table <- table_nodes[[2]]
# Extract rows and parse manually
rows <- target_table %>% html_nodes("tr")
# Extract headers
headers <- rows[1] %>%
html_nodes("td, th") %>%
html_text(trim = TRUE)
# Extract data rows
data <- rows[-1] %>%
lapply(function(row) {
row %>% html_nodes("td") %>% html_text(trim = TRUE)
})
# Convert to a dataframe
data_frame <- as.data.frame(do.call(rbind, data), stringsAsFactors = FALSE)
# Assign column names
colnames(data_frame) <- headers
data_table <- table_nodes[[2]] %>%
html_table(fill = TRUE)
library(rvest)
# Specify the file path
file_path <- "984559.htm"  # Replace with the correct path
# Read the HTML file
html_data <- read_html(file_path)
# Extract all <td> elements
target_table <- html_data %>% html_node("table.some-class, table#some-id")
cells <- target_table %>% html_nodes("td") %>% html_text(trim = TRUE)
# Check the content of the extracted cells
print(cells)
target_table
library(rvest)
# Specify the file path
file_path <- "984559.htm"  # Replace with the correct path
# Read the HTML file
html_data <- read_html(file_path)
# Extract all <td> elements
target_table <- html_data %>% html_node("table.some-class, table#some-id")
library(rvest)
# Specify the file path
file_path <- "984559.htm"  # Replace with the correct path
# Read the HTML file
html_data <- read_html(file_path)
# Extract all <td> elements
target_table <- html_data %>% html_node("table.some-class, table#some-id")
table_nodes <- html_data %>% html_nodes("table")
table_nodes
# Extract all <td> elements
target_table <- html_data %>% html_nodes("table")
cells <- target_table %>% html_nodes("td") %>% html_text(trim = TRUE)
# Check the content of the extracted cells
print(cells)
# Assuming 23 columns (as seen in the header), reshape the data
num_columns <- 23  # Replace with the actual column count
if (length(cells) %% num_columns == 0) {
data_matrix <- matrix(cells, ncol = num_columns, byrow = TRUE)
data_frame <- as.data.frame(data_matrix, stringsAsFactors = FALSE)
} else {
stop("Mismatch between number of cells and expected columns.")
}
library(rvest)
# Specify the file path
file_path <- "984559.htm"  # Replace with the correct path
# Read the HTML file
html_data <- read_html(file_path)
# Extract all <td> elements
target_table <- html_data %>% html_nodes("table")
cells <- target_table %>% html_nodes("td") %>% html_text(trim = TRUE)
# Check the content of the extracted cells
print(cells)
# Assuming 23 columns (as seen in the header), reshape the data
num_columns <- 23  # Replace with the actual column count
if (length(cells) %% num_columns == 0) {
data_matrix <- matrix(cells, ncol = num_columns, byrow = TRUE)
data_frame <- as.data.frame(data_matrix, stringsAsFactors = FALSE)
} else {
stop("Mismatch between number of cells and expected columns.")
}
library(rvest)
# Specify the file path
file_path <- "984559.htm"  # Replace with the correct path
# Read the HTML file
html_data <- read_html(file_path)
# Extract all <td> elements
target_table <- html_data %>% html_nodes("table")
cells <- target_table %>% html_nodes("td") %>% html_text(trim = TRUE)
# Check the content of the extracted cells
print(cells)
print(head(cells))
str(cells)
cells[1:50]
html_data <- read_html(file_path)
table_nodes <- html_data %>% html_nodes("table")
target_table <- table_nodes[[2]]
target_table
cells <- target_table %>% html_nodes("td") %>% html_text(trim = TRUE)
cells
length(cells)
cells[1:5-]
cells[1:50]
cells <- target_table %>% html_nodes("td") %>% html_text(trim = TRUE)
cells[1:50]
cells[1:23]
cells[(1:23 + 23)]
cells[(1:23 + 23 + 23)]
# Extract headers (first 23 elements based on your table's structure)
num_columns <- 23  # Number of columns in the table
headers <- cells[1:num_columns]
# Extract the data (remaining elements)
data <- cells[(num_columns + 1):length(cells)]
# Reshape the data into a matrix with the correct number of columns
data_matrix <- matrix(data, ncol = num_columns, byrow = TRUE)
# Convert the matrix to a dataframe
data_frame <- as.data.frame(data_matrix, stringsAsFactors = FALSE)
# Assign the headers to the dataframe
colnames(data_frame) <- headers
# View the resulting dataframe
head(data_frame)
save(data_frame, file = "Iyer.RData")
usethis::use_vignette(name = "ebnm_lgp")
library(EBMFSmooth)
library(flashier)
library(TMB)
library(Matrix)
library(tidyverse)
set.seed(123)
n <- 100
t <- seq(0, 4*pi, length = n)
s <- c(rep(1.5,n/4), rep(0.5,n/4), rep(1,n/4), rep(2,n/4))
f <- function(t) 2*sin(t)
x <- f(t) + rnorm(n, 0, s)
plot(t, x)
gp_setup_options <- EBMFSmooth::LGP_setup(t = t, p = 2, num_knots = 30, betaprec = 1e-3)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(EBMFSmooth)
library(flashier)
library(TMB)
library(Matrix)
library(tidyverse)
set.seed(123)
n <- 100
t <- seq(0, 4*pi, length = n)
s <- c(rep(1.5,n/4), rep(0.5,n/4), rep(1,n/4), rep(2,n/4))
f <- function(t) 2*sin(t)
x <- f(t) + rnorm(n, 0, s)
plot(t, x)
gp_setup_options <- EBMFSmooth::LGP_setup(t = t, p = 2, num_knots = 30, betaprec = 1e-3)
ebnm_gp <- ebnm_gp_generator(gp_setup = gp_setup_options)
?EBMFSmooth::ebnm_LGP_generator
ebnm_gp <- EBMFSmooth::ebnm_LGP_generator(LGP_setup = gp_setup_options)
gp_setup_options <- EBMFSmooth::LGP_setup(t = t, p = 2, num_knots = 30, betaprec = 1e-3)
ebnm_gp <- EBMFSmooth::ebnm_LGP_generator(LGP_setup = gp_setup_options)
ebnm::ebnm_check_fn(ebnm_gp, x = x, s = s)
ebnm::ebnm_check_fn(ebnm_gp, x = x, s = s)
try <- ebnm_gp(x = x, s = s)
try <- ebnm_gp(x = x, s = s)
plot(t, try$posterior$mean, type = 'l', col = 'red',
ylim = range(c(try$posterior$mean - 2*sqrt(try$posterior$var), try$posterior$mean + 2*sqrt(try$posterior$var))),
xlab = "t", ylab = "f(t)")
polygon(c(t, rev(t)), c(try$posterior$mean - 2*sqrt(try$posterior$var), rev(try$posterior$mean + 2*sqrt(try$posterior$var))), col = rgb(1,0,0,0.2), border = NA)
lines(t, f(t), col = 'black', lty = 2)
legend("topright", legend = c("True function", "Posterior mean"), col = c("black", "red"), lty = c(2, 1))
n <- 1000
P <- 50
K <- 2
sigma_E <- 1
set.seed(123)
f1 <- rexp(P) * rbinom(P, 1, 0.3); f2 <- rexp(P) * rbinom(P, 1, 0.7)
F_mat <- matrix(c(f1,f2), byrow = F, nrow = P, ncol = K)
t_vec <- seq(0, 2*pi, length.out = n)
l1 <- sin(t_vec); l2 <- cos(t_vec)
l1_norm <- l1/sqrt(sum(l1^2)); l2_norm <- l2/sqrt(sum(l2^2))
f1_norm <- f1*sqrt(sum(l1^2)); f2_norm <- f2*sqrt(sum(l2^2))
L_mat <- matrix(c(l1,l2), byrow = F, nrow = n, ncol = K)
E_mat <- matrix(rnorm(n*P, sd = sigma_E), nrow = n, ncol = P)
Y <- L_mat %*% t(F_mat) + E_mat
ebnm_list <- list()
settings <- EBMFSmooth::LGP_setup(t = t_vec, p = 2, num_knots = 30, betaprec = 1e-3)
ebnm_list[[1]] <- EBMFSmooth::ebnm_LGP_generator(LGP_setup = settings)
ebnm_list[[2]] <- flash_ebnm(
prior_family = "point_exponential"
)
ebnm_check_fn(ebnm_list[[1]], x = Y[,1], s = sigma_E)
ebnm_list[[1]](x = Y[,1], s = sigma_E)
ebnm_list <- list()
ebnm_list[[1]] <- EBMFSmooth::ebnm_LGP_generator(LGP_setup  = settings)
ebnm_list[[2]] <- flashier::flash_ebnm(
prior_family = "point_exponential"
)
system.time({
f.mod <- flash(data = (Y), S = (sigma_E),
ebnm_fn = ebnm_list,
greedy_Kmax = 2, var_type = 0,
backfit = T,
verbose = 3)
})
L_gp_norm1 <- (f.mod$L_pm[,1])/sqrt(sum(f.mod$L_pm[,1]^2))
L_gp_norm2 <- (f.mod$L_pm[,2])/sqrt(sum(f.mod$L_pm[,2]^2))
F_gp_norm1 <- (f.mod$F_pm[,1]) * sqrt(sum(f.mod$L_pm[,1]^2))
F_gp_norm2 <- (f.mod$F_pm[,2]) * sqrt(sum(f.mod$L_pm[,2]^2))
par(mfrow = c(2,2))
plot(L_gp_norm2 ~ t_vec, type = "l", col = "red", lty = "dashed",
ylim = c(min(l1_norm),max(l1_norm)), xlab = "t", ylab = "loadings")
lines(l1_norm ~ t_vec, type = "l", xlab = "t", ylab = "loadings", lty = "solid")
plot(L_gp_norm1 ~ t_vec, type = "l", col = "red", lty = "dashed",
ylim = c(min(l2_norm),max(l2_norm)), xlab = "t", ylab = "loadings")
lines(l2_norm ~ t_vec, col = "black", lty = "solid")
plot(F_gp_norm2 ~ c(1:50), type = "l", col = "red", lty = "dashed",
ylim = c(min(f1_norm),max(f1_norm)), xlab = "t", ylab = "factors")
lines(f1_norm ~ c(1:50), type = "o", ylab = "factors", lty = "solid")
plot(F_gp_norm1 ~ c(1:50), type = "l", col = "red", lty = "dashed",
ylim = c(min(f2_norm),max(f2_norm)), xlab = "t", ylab = "factors")
lines(f2_norm ~ c(1:50), col = "black", lty = "solid", type = "o")
par(mfrow = c(1,1))
usethis::use_vignette(name = "ebnm_matern")
ebnm_Matern_generator
library(EBMFSmooth)
library(flashier)
library(INLA)
library(Matrix)
library(tidyverse)
ebnm_Matern <- ebnm_Matern_generator(cbind(locations$x, locations$y))
set.seed(123)
P <- (10)^2
locations <- expand.grid(seq(0,1,length.out = sqrt(P)), seq(0,1,length.out = sqrt(P)))
colnames(locations) <- c("x", "y")
f <- function(x, y, center_x, center_y, scale) {
exp(-((x - center_x) ^ 2 + (y - center_y) ^ 2) / scale)
}
f1 <- f(locations[,1], locations[,2], center_x = 0.5, center_y = 0.4, scale = 0.2)
f2 <- f(locations[,1], locations[,2], center_x = 0.2, center_y = 0.7, scale = 0.2)
n <- 50
l1 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.4)
l2 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.7)
sigma_E <- 0.1
Y <- matrix(0, nrow = n, ncol = P)
Y <- l1 %*% t(f1) + l2 %*% t(f2) + rnorm(n * P, mean = 0, sd = sigma_E)
heatmap(Y,
scale = "row",    # Normalize the gene expression data by row
Colv = NA,        # Don't cluster columns (genes)
Rowv = NA,        # Don't cluster rows (time points)
col = colorRampPalette(c("blue", "white", "red"))(50))  # Color gradient
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(EBMFSmooth)
library(flashier)
library(INLA)
library(Matrix)
library(tidyverse)
set.seed(123)
P <- (10)^2
locations <- expand.grid(seq(0,1,length.out = sqrt(P)), seq(0,1,length.out = sqrt(P)))
colnames(locations) <- c("x", "y")
f <- function(x, y, center_x, center_y, scale) {
exp(-((x - center_x) ^ 2 + (y - center_y) ^ 2) / scale)
}
f1 <- f(locations[,1], locations[,2], center_x = 0.5, center_y = 0.4, scale = 0.2)
f2 <- f(locations[,1], locations[,2], center_x = 0.2, center_y = 0.7, scale = 0.2)
n <- 50
l1 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.4)
l2 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.7)
sigma_E <- 0.1
Y <- matrix(0, nrow = n, ncol = P)
Y <- l1 %*% t(f1) + l2 %*% t(f2) + rnorm(n * P, mean = 0, sd = sigma_E)
heatmap(Y,
scale = "row",    # Normalize the gene expression data by row
Colv = NA,        # Don't cluster columns (genes)
Rowv = NA,        # Don't cluster rows (time points)
col = colorRampPalette(c("blue", "white", "red"))(50))  # Color gradient
ebnm_Matern <- ebnm_Matern_generator(cbind(locations$x, locations$y))
ebnm_list <- list()
ebnm_list[[1]] <- flash_ebnm(
prior_family = "point_exponential"
)
ebnm_list[[2]] <- ebnm_Matern
ebnm_Matern <- ebnm_Matern_generator(cbind(locations$x, locations$y))
ebnm_list <- list()
ebnm_list[[1]] <- flash_ebnm(
prior_family = "point_exponential"
)
ebnm_list[[2]] <- ebnm_Matern
# record the runtime:
system.time({
f.mod = flash(data = (Y), S = (sigma_E),
ebnm_fn = ebnm_list,
greedy_Kmax = 2, var_type = 0,
backfit = T,
verbose = 3)
})
l1_norm <- l1/sqrt(sum(l1^2))
l2_norm <- l2/sqrt(sum(l2^2))
f1_norm <- f1*sqrt(sum(l1^2))
f2_norm <- f2*sqrt(sum(l2^2))
L_gp_norm1 <- (f.mod$L_pm[,1]) / sqrt(sum(f.mod$L_pm[,1]^2))
L_gp_norm2 <- (f.mod$L_pm[,2]) / sqrt(sum(f.mod$L_pm[,2]^2))
F_gp_norm1 <- (f.mod$F_pm[,1]) * sqrt(sum(f.mod$L_pm[,1]^2))
F_gp_norm2 <- (f.mod$F_pm[,2]) * sqrt(sum(f.mod$L_pm[,2]^2))
par(mfrow = c(2,2))
plot(L_gp_norm1 ~ c(1:n), type = "l", col = "red", lty = "dashed",
ylim = c(min(l1_norm),max(l1_norm)), xlab = "index", ylab = "loadings")
lines(l1_norm ~ c(1:n), type = "l", xlab = "index", ylab = "loadings", lty = "solid")
plot(L_gp_norm2 ~ c(1:n), type = "l", col = "red", lty = "dashed",
ylim = c(min(l2_norm),max(l2_norm)), xlab = "index", ylab = "loadings")
lines(l2_norm ~ c(1:n), col = "black", lty = "solid")
plot(F_gp_norm1 ~ c(1:P), type = "l", col = "red", lty = "dashed",
ylim = c(min(f1_norm),max(f1_norm)), xlab = "index", ylab = "factors")
lines(f1_norm ~ c(1:P), type = "o", ylab = "factors", lty = "solid")
plot(F_gp_norm2 ~ c(1:P), type = "l", col = "red", lty = "dashed",
ylim = c(min(f2_norm),max(f2_norm)), xlab = "index", ylab = "factors")
lines(f2_norm ~ c(1:P), col = "black", lty = "solid", type = "o")
par(mfrow = c(1,1))
# MSE: Normalized Factor
mse_f <- (mean((f1_norm - F_gp_norm1)^2) + mean((f2_norm - F_gp_norm2)^2)) / 2
mse_f
# MSE: Normalized Loading
mse_l <- (mean((l1_norm - L_gp_norm1)^2) + mean((l2_norm - L_gp_norm2)^2)) / 2
mse_l
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(EBMFSmooth)
library(flashier)
library(INLA)
library(Matrix)
library(tidyverse)
set.seed(1234)
P <- (10)^2
locations <- expand.grid(seq(0,1,length.out = sqrt(P)), seq(0,1,length.out = sqrt(P)))
colnames(locations) <- c("x", "y")
f <- function(x, y, center_x, center_y, scale) {
exp(-((x - center_x) ^ 2 + (y - center_y) ^ 2) / scale)
}
f1 <- f(locations[,1], locations[,2], center_x = 0.5, center_y = 0.4, scale = 0.2)
f2 <- f(locations[,1], locations[,2], center_x = 0.2, center_y = 0.7, scale = 0.2)
n <- 50
l1 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.4)
l2 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.7)
sigma_E <- 0.1
Y <- matrix(0, nrow = n, ncol = P)
Y <- l1 %*% t(f1) + l2 %*% t(f2) + rnorm(n * P, mean = 0, sd = sigma_E)
heatmap(Y,
scale = "row",    # Normalize the gene expression data by row
Colv = NA,        # Don't cluster columns (genes)
Rowv = NA,        # Don't cluster rows (time points)
col = colorRampPalette(c("blue", "white", "red"))(50))  # Color gradient
ebnm_Matern <- ebnm_Matern_generator(cbind(locations$x, locations$y))
ebnm_list <- list()
ebnm_list[[1]] <- flash_ebnm(
prior_family = "point_exponential"
)
ebnm_list[[2]] <- ebnm_Matern
# record the runtime:
system.time({
f.mod = flash(data = (Y), S = (sigma_E),
ebnm_fn = ebnm_list,
greedy_Kmax = 2, var_type = 0,
backfit = T,
verbose = 3)
})
l1_norm <- l1/sqrt(sum(l1^2))
l2_norm <- l2/sqrt(sum(l2^2))
f1_norm <- f1*sqrt(sum(l1^2))
f2_norm <- f2*sqrt(sum(l2^2))
L_gp_norm1 <- (f.mod$L_pm[,1]) / sqrt(sum(f.mod$L_pm[,1]^2))
L_gp_norm2 <- (f.mod$L_pm[,2]) / sqrt(sum(f.mod$L_pm[,2]^2))
F_gp_norm1 <- (f.mod$F_pm[,1]) * sqrt(sum(f.mod$L_pm[,1]^2))
F_gp_norm2 <- (f.mod$F_pm[,2]) * sqrt(sum(f.mod$L_pm[,2]^2))
par(mfrow = c(2,2))
plot(L_gp_norm1 ~ c(1:n), type = "l", col = "red", lty = "dashed",
ylim = c(min(l1_norm),max(l1_norm)), xlab = "index", ylab = "loadings")
lines(l1_norm ~ c(1:n), type = "l", xlab = "index", ylab = "loadings", lty = "solid")
plot(L_gp_norm2 ~ c(1:n), type = "l", col = "red", lty = "dashed",
ylim = c(min(l2_norm),max(l2_norm)), xlab = "index", ylab = "loadings")
lines(l2_norm ~ c(1:n), col = "black", lty = "solid")
plot(F_gp_norm1 ~ c(1:P), type = "l", col = "red", lty = "dashed",
ylim = c(min(f1_norm),max(f1_norm)), xlab = "index", ylab = "factors")
lines(f1_norm ~ c(1:P), type = "o", ylab = "factors", lty = "solid")
plot(F_gp_norm2 ~ c(1:P), type = "l", col = "red", lty = "dashed",
ylim = c(min(f2_norm),max(f2_norm)), xlab = "index", ylab = "factors")
lines(f2_norm ~ c(1:P), col = "black", lty = "solid", type = "o")
par(mfrow = c(1,1))
# MSE: Normalized Factor
mse_f <- (mean((f1_norm - F_gp_norm1)^2) + mean((f2_norm - F_gp_norm2)^2)) / 2
mse_f
# MSE: Normalized Loading
mse_l <- (mean((l1_norm - L_gp_norm1)^2) + mean((l2_norm - L_gp_norm2)^2)) / 2
mse_l
library(gridExtra)
grid_res <- 200
fine_locations <- expand.grid(
x = seq(0, 1, length.out = grid_res),
y = seq(0, 1, length.out = grid_res)
)
# Evaluate f1 and f2 on the grid
fine_locations$f1 <- f(fine_locations[,1], fine_locations[,2], center_x = 0.5, center_y = 0.4, scale = 0.2)
fine_locations$f2 <- f(fine_locations[,1], fine_locations[,2], center_x = 0.2, center_y = 0.7, scale = 0.2)
fine_locations$f1 <- fine_locations$f1 /max(fine_locations$f1)
fine_locations$f2 <- fine_locations$f2 /max(fine_locations$f2)
# Create the heatplots
plot_f1 <- ggplot(fine_locations, aes(x = x, y = y, fill = f1)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of f1", x = "X Coordinate", y = "Y Coordinate", fill = "f1") +
# remove the legend
theme(legend.position = "none") +
theme_classic()
plot_f2 <- ggplot(fine_locations, aes(x = x, y = y, fill = f2)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of f2", x = "X Coordinate", y = "Y Coordinate", fill = "f2") +
theme_classic()
library(akima)
locations$fitted_f1 <- F_gp_norm1
locations$fitted_f2 <- F_gp_norm2
interp_f1 <- with(locations, interp(x, y, fitted_f1, duplicate = "mean"))
interp_f2 <- with(locations, interp(x, y, fitted_f2, duplicate = "mean"))
interp_f1_df <- data.frame(
x = rep(interp_f1$x, times = length(interp_f1$y)),
y = rep(interp_f1$y, each = length(interp_f1$x)),
fitted_f1 = as.vector(interp_f1$z)
)
interp_f2_df <- data.frame(
x = rep(interp_f2$x, times = length(interp_f2$y)),
y = rep(interp_f2$y, each = length(interp_f2$x)),
fitted_f2 = as.vector(interp_f2$z)
)
interp_f1_df$fitted_f1 <- interp_f1_df$fitted_f1 / max(na.omit(interp_f1_df$fitted_f1))
interp_f2_df$fitted_f2 <- interp_f2_df$fitted_f2 / max(na.omit(interp_f2_df$fitted_f2))
plot_f1_fitted <- ggplot(interp_f1_df, aes(x = x, y = y, fill = fitted_f1)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f1", x = "X Coordinate", y = "Y Coordinate", fill = "f1") +
theme_classic()
plot_f2_fitted <- ggplot(interp_f2_df, aes(x = x, y = y, fill = fitted_f2)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f2", x = "X Coordinate", y = "Y Coordinate", fill = "f2") +
theme_classic()
# Display the plots in 2x2 grid
grid.arrange(plot_f1, plot_f2, plot_f1_fitted, plot_f2_fitted, ncol = 2)
vignette(package = "EBMFSmooth")
devtools::install(build_vignettes = TRUE)
vignette("EBMFSmooth")
vignette(package = "EBMFSmooth")
vignette("ebnm_lgp", package = "EBMFSmooth")
vignette("Iyer", package = "EBMFSmooth")
vignette("ebnm_matern", package = "EBMFSmooth")
vignette("ebnm_lgp", package = "EBMFSmooth")
vignette("Iyer", package = "EBMFSmooth")
library(EBMFSmooth)
library(flashier)
library(INLA)
library(Matrix)
library(tidyverse)
library(gridExtra)
set.seed(1234)
P <- (10)^2
locations <- expand.grid(seq(0,1,length.out = sqrt(P)), seq(0,1,length.out = sqrt(P)))
colnames(locations) <- c("x", "y")
f <- function(x, y, center_x, center_y, scale) {
exp(-((x - center_x) ^ 2 + (y - center_y) ^ 2) / scale)
}
f1 <- f(locations[,1], locations[,2], center_x = 0.5, center_y = 0.4, scale = 0.2)
f2 <- f(locations[,1], locations[,2], center_x = 0.2, center_y = 0.7, scale = 0.2)
n <- 50
l1 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.4)
l2 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.7)
sigma_E <- 0.1
Y <- matrix(0, nrow = n, ncol = P)
Y <- l1 %*% t(f1) + l2 %*% t(f2) + rnorm(n * P, mean = 0, sd = sigma_E)
heatmap(Y,
scale = "row",    # Normalize the gene expression data by row
Colv = NA,        # Don't cluster columns (genes)
Rowv = NA,        # Don't cluster rows (time points)
col = colorRampPalette(c("blue", "white", "red"))(50))  # Color gradient
ebnm_Matern <- EBMFSmooth::ebnm_Matern_generator(cbind(locations$x, locations$y))
ebnm_list <- list()
ebnm_list[[1]] <- flashier::flash_ebnm(
prior_family = "point_exponential"
)
ebnm_list[[2]] <- ebnm_Matern
# record the runtime:
system.time({
f.mod = flashier::flash(data = (Y), S = (sigma_E),
ebnm_fn = ebnm_list,
greedy_Kmax = 2, var_type = 0,
backfit = T,
verbose = 3)
})
# record the runtime:
system.time({
f.mod = flashier::flash(data = (Y), S = (sigma_E),
ebnm_fn = ebnm_list,
greedy_Kmax = 2, var_type = 2,
backfit = T,
verbose = 3)
})
sigma_E
