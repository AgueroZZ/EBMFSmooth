opt_result
result <- INLA::inla(
formula,
scale = (1 / s ^ 2),
control.inla = list(int.strategy = "eb", strategy = "gaussian"),
control.family = list(control.link=list(model=link), hyper = list(prec = list(fixed = TRUE, initial = 0))),
control.fixed = INLA::control.fixed(prec = 0),
data = INLA::inla.stack.data(stack),
control.predictor = list(A = INLA::inla.stack.A(stack), link=1),
silent = TRUE
)
result$offset.linear.predictor
ii
ii <- INLA::inla.stack.index(stack, tag = "est")$data
ii
library(EBMFSmooth)
library(flashier)
library(INLA)
library(Matrix)
library(tidyverse)
library(gridExtra)
set.seed(12)
P <- (30)^2
locations <- expand.grid(seq(0,1,length.out = sqrt(P)), seq(0,1,length.out = sqrt(P)))
colnames(locations) <- c("x", "y")
f <- function(x, y, center_x, center_y, scale) {
exp(-((x - center_x) ^ 2 + (y - center_y) ^ 2) / scale)
}
f1 <- f(locations[,1], locations[,2], center_x = 0.6, center_y = 0.4, scale = 0.2)
f2 <- f(locations[,1], locations[,2], center_x = 0.2, center_y = 0.7, scale = 0.2)
n <- 100
l1 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.4)
l2 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.7)
sigma_E <- 1
Y <- matrix(0, nrow = n, ncol = P)
Y <- l1 %*% t(f1) + l2 %*% t(f2) + rnorm(n * P, mean = 0, sd = sigma_E)
# heatmap(Y,
#         scale = "row",    # Normalize the gene expression data by row
#         Colv = NA,        # Don't cluster columns (genes)
#         Rowv = NA,        # Don't cluster rows (time points)
#         col = colorRampPalette(c("blue", "white", "red"))(50))  # Color gradient
ebnm_Matern <- EBMFSmooth::ebnm_Matern_generator(cbind(locations$x, locations$y), penalty_range = 10, link = "log")
ebnm_list <- list()
ebnm_list[[1]] <- flashier::flash_ebnm(
prior_family = "point_exponential"
)
ebnm_list[[2]] <- ebnm_Matern
# ebnm_list[[2]] <- function(x,
#                            s,
#                            g_init = NULL,
#                            fix_g = TRUE,
#                            output = NULL) {
#   ebnm_Matern(x,
#               s,
#               g_init = g_init,
#               fix_g = TRUE,
#               output = output)
# }
# ebnm_list[[2]] <- flashier::flash_ebnm(
#   prior_family = "point_exponential"
# )
f.mod = flashier::flash_init(data = Y, S = NULL, var_type = 0) |>
flashier::flash_set_verbose(verbose = 3) |>
flashier::flash_set_conv_crit(fn = flashier::flash_conv_crit_max_chg, tol = 1e-4)
f.mod = flashier::flash_init(data = Y, S = NULL, var_type = 0) |>
flashier::flash_set_verbose(verbose = 3) |>
flashier::flash_set_conv_crit(fn = flashier::flash_conv_crit_max_chg, tol = 1e-4) |>
flashier::flash_greedy(Kmax = 3, ebnm_fn = ebnm_list, extrapolate = TRUE)
ebnm_Matern
l1_norm <- l1/sqrt(sum(l1^2))
l2_norm <- l2/sqrt(sum(l2^2))
f1_norm <- f1*sqrt(sum(l1^2))
f2_norm <- f2*sqrt(sum(l2^2))
L_gp_norm1 <- (f.mod$L_pm[,1]) / sqrt(sum(f.mod$L_pm[,1]^2))
L_gp_norm2 <- (f.mod$L_pm[,2]) / sqrt(sum(f.mod$L_pm[,2]^2))
F_gp_norm1 <- (f.mod$F_pm[,1]) * sqrt(sum(f.mod$L_pm[,1]^2))
F_gp_norm2 <- (f.mod$F_pm[,2]) * sqrt(sum(f.mod$L_pm[,2]^2))
# par(mfrow = c(2,2))
# plot(L_gp_norm2 ~ c(1:n), type = "l", col = "red", lty = "dashed",
#      ylim = c(min(l1_norm),max(l1_norm)), xlab = "index", ylab = "loadings")
# lines(l1_norm ~ c(1:n), type = "l", xlab = "index", ylab = "loadings", lty = "solid")
# plot(L_gp_norm1 ~ c(1:n), type = "l", col = "red", lty = "dashed",
#      ylim = c(min(l2_norm),max(l2_norm)), xlab = "index", ylab = "loadings")
# lines(l2_norm ~ c(1:n), col = "black", lty = "solid")
# plot(F_gp_norm2 ~ c(1:P), type = "l", col = "red", lty = "dashed",
#      ylim = c(min(f1_norm),max(f1_norm)), xlab = "index", ylab = "factors")
# lines(f1_norm ~ c(1:P), type = "o", ylab = "factors", lty = "solid")
# plot(F_gp_norm1 ~ c(1:P), type = "l", col = "red", lty = "dashed",
#      ylim = c(min(f2_norm),max(f2_norm)), xlab = "index", ylab = "factors")
# lines(f2_norm ~ c(1:P), col = "black", lty = "solid", type = "o")
# par(mfrow = c(1,1))
grid_res <- 200
fine_locations <- expand.grid(
x = seq(0, 1, length.out = grid_res),
y = seq(0, 1, length.out = grid_res)
)
# Evaluate f1 and f2 on the grid
fine_locations$f1 <- f(fine_locations$x, fine_locations$y, center_x = 0.6, center_y = 0.4, scale = 0.2)
fine_locations$f2 <- f(fine_locations$x, fine_locations$y, center_x = 0.2, center_y = 0.7, scale = 0.2)
fine_locations$f1 <- fine_locations$f1 /max(fine_locations$f1)
fine_locations$f2 <- fine_locations$f2 /max(fine_locations$f2)
# Create the heatplots
plot_f1 <- ggplot(fine_locations, aes(x = x, y = y, fill = f1)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of f1", x = "X Coordinate", y = "Y Coordinate", fill = "f1") +
# remove the legend
theme(legend.position = "none") +
theme_classic()
plot_f2 <- ggplot(fine_locations, aes(x = x, y = y, fill = f2)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of f2", x = "X Coordinate", y = "Y Coordinate", fill = "f2") +
theme_classic()
library(akima)
locations$fitted_f1 <- F_gp_norm1
locations$fitted_f2 <- F_gp_norm2
interp_f1 <- with(locations, interp(x, y, fitted_f1, duplicate = "mean"))
interp_f2 <- with(locations, interp(x, y, fitted_f2, duplicate = "mean"))
interp_f1_df <- data.frame(
x = rep(interp_f1$x, times = length(interp_f1$y)),
y = rep(interp_f1$y, each = length(interp_f1$x)),
fitted_f1 = as.vector(interp_f1$z)
)
interp_f2_df <- data.frame(
x = rep(interp_f2$x, times = length(interp_f2$y)),
y = rep(interp_f2$y, each = length(interp_f2$x)),
fitted_f2 = as.vector(interp_f2$z)
)
interp_f1_df$fitted_f1 <- interp_f1_df$fitted_f1 / max(na.omit(interp_f1_df$fitted_f1))
interp_f2_df$fitted_f2 <- interp_f2_df$fitted_f2 / max(na.omit(interp_f2_df$fitted_f2))
plot_f1_fitted <- ggplot(interp_f1_df, aes(x = x, y = y, fill = fitted_f1)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f1", x = "X Coordinate", y = "Y Coordinate", fill = "f1") +
theme_classic()
plot_f2_fitted <- ggplot(interp_f2_df, aes(x = x, y = y, fill = fitted_f2)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f2", x = "X Coordinate", y = "Y Coordinate", fill = "f2") +
theme_classic()
# Display the plots in 2x2 grid
grid.arrange(plot_f1, plot_f2, plot_f1_fitted, plot_f2_fitted, ncol = 2)
f.mod$elbo
# -128338.2
f.mod <- f.mod |> flash_backfit(maxiter = 30)
l1_norm <- l1/sqrt(sum(l1^2))
l2_norm <- l2/sqrt(sum(l2^2))
f1_norm <- f1*sqrt(sum(l1^2))
f2_norm <- f2*sqrt(sum(l2^2))
L_gp_norm1 <- (f.mod$L_pm[,1]) / sqrt(sum(f.mod$L_pm[,1]^2))
L_gp_norm2 <- (f.mod$L_pm[,2]) / sqrt(sum(f.mod$L_pm[,2]^2))
F_gp_norm1 <- (f.mod$F_pm[,1]) * sqrt(sum(f.mod$L_pm[,1]^2))
F_gp_norm2 <- (f.mod$F_pm[,2]) * sqrt(sum(f.mod$L_pm[,2]^2))
# par(mfrow = c(2,2))
# plot(L_gp_norm2 ~ c(1:n), type = "l", col = "red", lty = "dashed",
#      ylim = c(min(l1_norm),max(l1_norm)), xlab = "index", ylab = "loadings")
# lines(l1_norm ~ c(1:n), type = "l", xlab = "index", ylab = "loadings", lty = "solid")
# plot(L_gp_norm1 ~ c(1:n), type = "l", col = "red", lty = "dashed",
#      ylim = c(min(l2_norm),max(l2_norm)), xlab = "index", ylab = "loadings")
# lines(l2_norm ~ c(1:n), col = "black", lty = "solid")
# plot(F_gp_norm2 ~ c(1:P), type = "l", col = "red", lty = "dashed",
#      ylim = c(min(f1_norm),max(f1_norm)), xlab = "index", ylab = "factors")
# lines(f1_norm ~ c(1:P), type = "o", ylab = "factors", lty = "solid")
# plot(F_gp_norm1 ~ c(1:P), type = "l", col = "red", lty = "dashed",
#      ylim = c(min(f2_norm),max(f2_norm)), xlab = "index", ylab = "factors")
# lines(f2_norm ~ c(1:P), col = "black", lty = "solid", type = "o")
# par(mfrow = c(1,1))
grid_res <- 200
fine_locations <- expand.grid(
x = seq(0, 1, length.out = grid_res),
y = seq(0, 1, length.out = grid_res)
)
# Evaluate f1 and f2 on the grid
fine_locations$f1 <- f(fine_locations$x, fine_locations$y, center_x = 0.6, center_y = 0.4, scale = 0.2)
fine_locations$f2 <- f(fine_locations$x, fine_locations$y, center_x = 0.2, center_y = 0.7, scale = 0.2)
fine_locations$f1 <- fine_locations$f1 /max(fine_locations$f1)
fine_locations$f2 <- fine_locations$f2 /max(fine_locations$f2)
# Create the heatplots
plot_f1 <- ggplot(fine_locations, aes(x = x, y = y, fill = f1)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of f1", x = "X Coordinate", y = "Y Coordinate", fill = "f1") +
# remove the legend
theme(legend.position = "none") +
theme_classic()
plot_f2 <- ggplot(fine_locations, aes(x = x, y = y, fill = f2)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of f2", x = "X Coordinate", y = "Y Coordinate", fill = "f2") +
theme_classic()
library(akima)
locations$fitted_f1 <- F_gp_norm1
locations$fitted_f2 <- F_gp_norm2
interp_f1 <- with(locations, interp(x, y, fitted_f1, duplicate = "mean"))
interp_f2 <- with(locations, interp(x, y, fitted_f2, duplicate = "mean"))
interp_f1_df <- data.frame(
x = rep(interp_f1$x, times = length(interp_f1$y)),
y = rep(interp_f1$y, each = length(interp_f1$x)),
fitted_f1 = as.vector(interp_f1$z)
)
interp_f2_df <- data.frame(
x = rep(interp_f2$x, times = length(interp_f2$y)),
y = rep(interp_f2$y, each = length(interp_f2$x)),
fitted_f2 = as.vector(interp_f2$z)
)
interp_f1_df$fitted_f1 <- interp_f1_df$fitted_f1 / max(na.omit(interp_f1_df$fitted_f1))
interp_f2_df$fitted_f2 <- interp_f2_df$fitted_f2 / max(na.omit(interp_f2_df$fitted_f2))
plot_f1_fitted <- ggplot(interp_f1_df, aes(x = x, y = y, fill = fitted_f1)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f1", x = "X Coordinate", y = "Y Coordinate", fill = "f1") +
theme_classic()
plot_f2_fitted <- ggplot(interp_f2_df, aes(x = x, y = y, fill = fitted_f2)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f2", x = "X Coordinate", y = "Y Coordinate", fill = "f2") +
theme_classic()
# Display the plots in 2x2 grid
grid.arrange(plot_f1, plot_f2, plot_f1_fitted, plot_f2_fitted, ncol = 2)
f.mod$elbo
# -128338.2
log(1e-4)
1e-4
log(100)
1e5
log(1e5)
library(EBMFSmooth)
library(flashier)
library(INLA)
library(Matrix)
library(tidyverse)
library(gridExtra)
set.seed(12)
P <- (30)^2
locations <- expand.grid(seq(0,1,length.out = sqrt(P)), seq(0,1,length.out = sqrt(P)))
colnames(locations) <- c("x", "y")
f <- function(x, y, center_x, center_y, scale) {
exp(-((x - center_x) ^ 2 + (y - center_y) ^ 2) / scale)
}
f1 <- f(locations[,1], locations[,2], center_x = 0.6, center_y = 0.4, scale = 0.2)
f2 <- f(locations[,1], locations[,2], center_x = 0.2, center_y = 0.7, scale = 0.2)
n <- 100
l1 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.4)
l2 <- rexp(n, rate = 1) * rbinom(n, size = 1, prob = 0.7)
sigma_E <- 1
Y <- matrix(0, nrow = n, ncol = P)
Y <- l1 %*% t(f1) + l2 %*% t(f2) + rnorm(n * P, mean = 0, sd = sigma_E)
ebnm_Matern <- EBMFSmooth::ebnm_Matern_generator(cbind(locations$x, locations$y), penalty_range = 10, link = "log")
ebnm_list <- list()
ebnm_list[[1]] <- flashier::flash_ebnm(
prior_family = "point_exponential"
)
ebnm_list[[2]] <- ebnm_Matern
system.time({
f.mod = flashier::flash_init(data = Y, S = NULL, var_type = 0) |>
flashier::flash_set_verbose(verbose = 3) |>
flashier::flash_set_conv_crit(fn = flashier::flash_conv_crit_max_chg, tol = 1e-4) |>
flashier::flash_greedy(Kmax = 3, ebnm_fn = ebnm_list, extrapolate = TRUE)
f.mod <- f.mod |> flash_backfit(maxiter = 30)
})
l1_norm <- l1/sqrt(sum(l1^2))
l2_norm <- l2/sqrt(sum(l2^2))
f1_norm <- f1*sqrt(sum(l1^2))
f2_norm <- f2*sqrt(sum(l2^2))
L_gp_norm1 <- (f.mod$L_pm[,1]) / sqrt(sum(f.mod$L_pm[,1]^2))
L_gp_norm2 <- (f.mod$L_pm[,2]) / sqrt(sum(f.mod$L_pm[,2]^2))
F_gp_norm1 <- (f.mod$F_pm[,1]) * sqrt(sum(f.mod$L_pm[,1]^2))
F_gp_norm2 <- (f.mod$F_pm[,2]) * sqrt(sum(f.mod$L_pm[,2]^2))
grid_res <- 200
fine_locations <- expand.grid(
x = seq(0, 1, length.out = grid_res),
y = seq(0, 1, length.out = grid_res)
)
# Evaluate f1 and f2 on the grid
fine_locations$f1 <- f(fine_locations$x, fine_locations$y, center_x = 0.6, center_y = 0.4, scale = 0.2)
fine_locations$f2 <- f(fine_locations$x, fine_locations$y, center_x = 0.2, center_y = 0.7, scale = 0.2)
fine_locations$f1 <- fine_locations$f1 /max(fine_locations$f1)
fine_locations$f2 <- fine_locations$f2 /max(fine_locations$f2)
# Create the heatplots
plot_f1 <- ggplot(fine_locations, aes(x = x, y = y, fill = f1)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of f1", x = "X Coordinate", y = "Y Coordinate", fill = "f1") +
# remove the legend
theme(legend.position = "none") +
theme_classic()
plot_f2 <- ggplot(fine_locations, aes(x = x, y = y, fill = f2)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of f2", x = "X Coordinate", y = "Y Coordinate", fill = "f2") +
theme_classic()
library(akima)
locations$fitted_f1 <- F_gp_norm1
locations$fitted_f2 <- F_gp_norm2
interp_f1 <- with(locations, interp(x, y, fitted_f1, duplicate = "mean"))
interp_f2 <- with(locations, interp(x, y, fitted_f2, duplicate = "mean"))
interp_f1_df <- data.frame(
x = rep(interp_f1$x, times = length(interp_f1$y)),
y = rep(interp_f1$y, each = length(interp_f1$x)),
fitted_f1 = as.vector(interp_f1$z)
)
interp_f2_df <- data.frame(
x = rep(interp_f2$x, times = length(interp_f2$y)),
y = rep(interp_f2$y, each = length(interp_f2$x)),
fitted_f2 = as.vector(interp_f2$z)
)
interp_f1_df$fitted_f1 <- interp_f1_df$fitted_f1 / max(na.omit(interp_f1_df$fitted_f1))
interp_f2_df$fitted_f2 <- interp_f2_df$fitted_f2 / max(na.omit(interp_f2_df$fitted_f2))
plot_f1_fitted <- ggplot(interp_f1_df, aes(x = x, y = y, fill = fitted_f1)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f1", x = "X Coordinate", y = "Y Coordinate", fill = "f1") +
theme_classic()
plot_f2_fitted <- ggplot(interp_f2_df, aes(x = x, y = y, fill = fitted_f2)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f2", x = "X Coordinate", y = "Y Coordinate", fill = "f2") +
theme_classic()
# Display the plots in 2x2 grid
grid.arrange(plot_f1, plot_f2, plot_f1_fitted, plot_f2_fitted, ncol = 2)
grid.arrange(plot_f1, plot_f2, plot_f2_fitted, plot_f1_fitted, ncol = 2)
f.mod$elbo
ebnm_list2 <- ebnm_list
ebnm_Matern2 <- EBMFSmooth::ebnm_Matern_generator_unpen(cbind(locations$x, locations$y), penalty_range = 10, link = "log")
source("~/Desktop/EBMF/EBMFSmooth/R/02_Matern_Spatial_unp.R")
ebnm_list2 <- ebnm_list
ebnm_Matern2 <- EBMFSmooth::ebnm_Matern_generator_unpen(cbind(locations$x, locations$y), penalty_range = 10, link = "log")
ebnm_list2 <- ebnm_list
ebnm_Matern2 <- ebnm_Matern_generator_unpen(cbind(locations$x, locations$y), penalty_range = 10, link = "log")
ebnm_list2 <- ebnm_list
ebnm_Matern2 <- ebnm_Matern_generator_unpen(cbind(locations$x, locations$y), link = "log")
ebnm_list2[[2]] <- ebnm_Matern2
system.time({
f.mod2 = flashier::flash_init(data = Y, S = NULL, var_type = 0) |>
flashier::flash_set_verbose(verbose = 3) |>
flashier::flash_set_conv_crit(fn = flashier::flash_conv_crit_max_chg, tol = 1e-4) |>
flashier::flash_greedy(Kmax = 3, ebnm_fn = ebnm_list2, extrapolate = TRUE)
f.mod2 <- f.mod2 |> flash_backfit(maxiter = 30)
})
source("~/Desktop/EBMF/EBMFSmooth/R/02_Matern_Spatial_unp.R")
ebnm_list2 <- ebnm_list
ebnm_Matern2 <- ebnm_Matern_generator_unpen(cbind(locations$x, locations$y), link = "log")
ebnm_list2[[2]] <- ebnm_Matern2
system.time({
f.mod2 = flashier::flash_init(data = Y, S = NULL, var_type = 0) |>
flashier::flash_set_verbose(verbose = 3) |>
flashier::flash_set_conv_crit(fn = flashier::flash_conv_crit_max_chg, tol = 1e-4) |>
flashier::flash_greedy(Kmax = 3, ebnm_fn = ebnm_list2, extrapolate = TRUE)
f.mod2 <- f.mod2 |> flash_backfit(maxiter = 30)
})
source("~/Desktop/EBMF/EBMFSmooth/R/02_Matern_Spatial_unp.R")
ebnm_list2 <- ebnm_list
ebnm_Matern2 <- ebnm_Matern_generator_unpen(cbind(locations$x, locations$y), link = "log")
ebnm_list2[[2]] <- ebnm_Matern2
system.time({
f.mod2 = flashier::flash_init(data = Y, S = NULL, var_type = 0) |>
flashier::flash_set_verbose(verbose = 3) |>
flashier::flash_set_conv_crit(fn = flashier::flash_conv_crit_max_chg, tol = 1e-4) |>
flashier::flash_greedy(Kmax = 3, ebnm_fn = ebnm_list2, extrapolate = TRUE)
f.mod2 <- f.mod2 |> flash_backfit(maxiter = 30)
})
L_gp_norm1 <- (f.mod2$L_pm[,1]) / sqrt(sum(f.mod2$L_pm[,1]^2))
L_gp_norm2 <- (f.mod2$L_pm[,2]) / sqrt(sum(f.mod2$L_pm[,2]^2))
F_gp_norm1 <- (f.mod2$F_pm[,1]) * sqrt(sum(f.mod2$L_pm[,1]^2))
F_gp_norm2 <- (f.mod2$F_pm[,2]) * sqrt(sum(f.mod2$L_pm[,2]^2))
library(akima)
locations$fitted_f1 <- F_gp_norm1
locations$fitted_f2 <- F_gp_norm2
interp_f1 <- with(locations, interp(x, y, fitted_f1, duplicate = "mean"))
interp_f2 <- with(locations, interp(x, y, fitted_f2, duplicate = "mean"))
interp_f1_df <- data.frame(
x = rep(interp_f1$x, times = length(interp_f1$y)),
y = rep(interp_f1$y, each = length(interp_f1$x)),
fitted_f1 = as.vector(interp_f1$z)
)
interp_f2_df <- data.frame(
x = rep(interp_f2$x, times = length(interp_f2$y)),
y = rep(interp_f2$y, each = length(interp_f2$x)),
fitted_f2 = as.vector(interp_f2$z)
)
interp_f1_df$fitted_f1 <- interp_f1_df$fitted_f1 / max(na.omit(interp_f1_df$fitted_f1))
interp_f2_df$fitted_f2 <- interp_f2_df$fitted_f2 / max(na.omit(interp_f2_df$fitted_f2))
plot_f1_fitted <- ggplot(interp_f1_df, aes(x = x, y = y, fill = fitted_f1)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f1", x = "X Coordinate", y = "Y Coordinate", fill = "f1") +
theme_classic()
plot_f2_fitted <- ggplot(interp_f2_df, aes(x = x, y = y, fill = fitted_f2)) +
geom_tile() +
scale_fill_gradientn(colors = terrain.colors(10)) +
labs(title = "Heatmap of fitted_f2", x = "X Coordinate", y = "Y Coordinate", fill = "f2") +
theme_classic()
# Display the plots in 2x2 grid
grid.arrange(plot_f1, plot_f2, plot_f2_fitted, plot_f1_fitted, ncol = 2)
grid.arrange(plot_f1, plot_f2, plot_f1_fitted, plot_f2_fitted, ncol = 2)
f.mod2$F_ghat
f.mod$F_ghat
grid.arrange(plot_f1, plot_f2, plot_f1_fitted, plot_f2_fitted, ncol = 2)
grid.arrange(plot_f1, plot_f2, plot_f2_fitted, plot_f1_fitted, ncol = 2)
f.mod$elbo
f.mod2$elbo
library(Seurat)
library(Matrix)
library(data.table)
library(flashier)
library(ggplot2)
library(patchwork)
library(cowplot)
library(RColorBrewer)
library(Biobase)
library(ggpubr)
library(gridExtra)
library(fastTopics)
library(tidyverse)
library(EBMFSmooth)
seurat_object <- readRDS("../data/mouse_embryo/processed_seurat/seurat_object.rds")
devtools::document()
library(smashr)
library(EBMFSmooth)
f <- function(t) {
3 + 1.2*sin(t)
}
n <- 100; set.seed(123)
t <- seq(0, 2*pi, length.out = n)
sd <- sample(x = c(0.1,0.3,0.5), size = length(t), replace = TRUE)
x <- f(t) + rnorm(length(t), sd = sd)
df <- data.frame(x = x, sd = sd)
start_runtime <- Sys.time()
res_smash = smash.gaus(df$x,df$sd,post.var=TRUE,ashparam = list(optmethod="mixVBEM"), return.loglr = TRUE)
smashr_time <- Sys.time() - start_runtime
smashr_time
plot(df$x,main="smashr, with VEB")
lines(res_smash$mu.est)
lines(res_smash$mu.est+2*sqrt(res_smash$mu.est.var),lty=2)
lines(res_smash$mu.est-2*sqrt(res_smash$mu.est.var),lty=2)
res_smash$loglik
ebm <- ebnm_Matern_generator(locations=cbind(t))
start_runtime <- Sys.time()
res_m= ebm(df$x,df$sd)
ebm_time <- Sys.time() - start_runtime
ebm_time
plot(df$x,main="EBMFSmooth (Matern)")
lines(res_m$posterior$mean)
lines(res_m$posterior$mean+2*sqrt(res_m$posterior$var),lty=2)
lines(res_m$posterior$mean-2*sqrt(res_m$posterior$var),lty=2)
res_m$log_likelihood
setup <- LGP_setup(t = t, betaprec = 0)
ebgp <- ebnm_LGP_generator(setup, link = "identity")
start_runtime <- Sys.time()
res_lgp <- ebgp(df$x,df$sd)
lgp_time <- Sys.time() - start_runtime
lgp_time
plot(df$x,main="EBMFSmooth (LGP)")
lines(res_lgp$posterior$mean)
lines(res_lgp$posterior$mean+2*sqrt(res_lgp$posterior$var),lty=2)
lines(res_lgp$posterior$mean-2*sqrt(res_lgp$posterior$var),lty=2)
res_lgp$log_likelihood
res_lgp$fitted_g
setup <- LGP_setup(t = t, betaprec = -1)
ebgp <- ebnm_LGP_generator(setup, link = "identity")
start_runtime <- Sys.time()
res_lgp <- ebgp(df$x,df$sd)
lgp_time <- Sys.time() - start_runtime
lgp_time
plot(df$x,main="EBMFSmooth (LGP)")
lines(res_lgp$posterior$mean)
lines(res_lgp$posterior$mean+2*sqrt(res_lgp$posterior$var),lty=2)
lines(res_lgp$posterior$mean-2*sqrt(res_lgp$posterior$var),lty=2)
res_lgp$log_likelihood
setup <- LGP_setup(t = t, betaprec = -5)
ebgp <- ebnm_LGP_generator(setup, link = "identity")
start_runtime <- Sys.time()
res_lgp <- ebgp(df$x,df$sd)
lgp_time <- Sys.time() - start_runtime
lgp_time
plot(df$x,main="EBMFSmooth (LGP)")
lines(res_lgp$posterior$mean)
lines(res_lgp$posterior$mean+2*sqrt(res_lgp$posterior$var),lty=2)
lines(res_lgp$posterior$mean-2*sqrt(res_lgp$posterior$var),lty=2)
res_lgp$log_likelihood
setup <- LGP_setup(t = t, betaprec = -1)
ebgp <- ebnm_LGP_generator(setup, link = "identity")
start_runtime <- Sys.time()
res_lgp <- ebgp(df$x,df$sd)
lgp_time <- Sys.time() - start_runtime
lgp_time
plot(df$x,main="EBMFSmooth (LGP)")
lines(res_lgp$posterior$mean)
lines(res_lgp$posterior$mean+2*sqrt(res_lgp$posterior$var),lty=2)
lines(res_lgp$posterior$mean-2*sqrt(res_lgp$posterior$var),lty=2)
res_lgp$log_likelihood
usethis::use_readme_rmd()
library(EBMFSmooth)
f <- function(t) {
3 + 1.2*sin(t)
}
n <- 100; set.seed(123)
t <- seq(0, 2*pi, length.out = n)
sd <- sample(x = c(0.1,0.3,0.5), size = length(t), replace = TRUE)
x <- f(t) + rnorm(length(t), sd = sd)
df <- data.frame(x = x, sd = sd)
setup <- LGP_setup(t = t, betaprec = -1)
ebgp <- ebnm_LGP_generator(setup, link = "identity")
start_runtime <- Sys.time()
res_lgp <- ebgp(df$x,df$sd)
lgp_time <- Sys.time() - start_runtime
lgp_time
plot(df$x,main="EBMFSmooth (LGP)")
lines(res_lgp$posterior$mean)
lines(res_lgp$posterior$mean+2*sqrt(res_lgp$posterior$var),lty=2)
lines(res_lgp$posterior$mean-2*sqrt(res_lgp$posterior$var),lty=2)
